import disnake
from disnake.ext import commands, tasks
import yt_dlp as youtube_dl
import asyncio
from collections import deque

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è youtube_dl
ytdl_format_options = {
    'format': 'bestaudio/best',
    'outtmpl': '%(extractor)s-%(id)s-%(title)s.%(ext)s',
    'restrictfilenames': True,
    'noplaylist': True,
    'nocheckcertificate': True,
    'ignoreerrors': False,
    'logtostderr': False,
    'quiet': True,
    'no_warnings': True,
    'default_search': 'auto',
    'source_address': '0.0.0.0'
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è ffmpeg
ffmpeg_options = {
    'options': '-vn'
}

ytdl = youtube_dl.YoutubeDL(ytdl_format_options)

class YTDLSource(disnake.PCMVolumeTransformer):
    def __init__(self, source, *, data, volume=0.5):
        super().__init__(source, volume)
        self.data = data
        self.title = data.get('title')
        self.url = data.get('url')

    @classmethod
    async def from_url(cls, url, *, loop=None, stream=False):
        loop = loop or asyncio.get_event_loop()
        data = await loop.run_in_executor(None, lambda: ytdl.extract_info(url, download=not stream))
        if 'entries' in data:
            data = data['entries'][0]
        filename = data['url'] if stream else ytdl.prepare_filename(data)
        return cls(disnake.FFmpegPCMAudio(filename, **ffmpeg_options), data=data)

# –û—á–µ—Ä–µ–¥—å —Ç—Ä–µ–∫–æ–≤
playlist = deque()

def setup_music_commands(bot: commands.Bot):
    @bot.slash_command(name='mus_join', description='–í–∫–ª—é—á–∏—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–π –ø–ª–µ–π–ª–∏—Å—Ç Nanson.')
    async def mus_join(inter: disnake.ApplicationCommandInteraction):
        await inter.response.defer()

        channel = inter.author.voice.channel
        if not channel:
            embed = disnake.Embed(
                title="‚ùå –û—à–∏–±–∫–∞",
                description="–í—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º –∫–∞–Ω–∞–ª–µ, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.",
                color=disnake.Color.red()
            )
            await inter.edit_original_message(embed=embed)
            return

        try:
            youtube_url = "https://www.youtube.com/watch?v=ecbWJNADUMs&list=PL08yb2oZ3X90ip5SdXZRWC4XQhnruQhXx"
            vc = await channel.connect()

            player = await YTDLSource.from_url(youtube_url, loop=bot.loop, stream=True)
            vc.play(player, after=lambda e: print(f'–û—à–∏–±–∫–∞ –ø–ª–µ–µ—Ä–∞: {e}') if e else None)

            embed = disnake.Embed(
                title="üéµ –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –Ω–∞—á–∞–ª–æ—Å—å",
                description=f"–¢—Ä–µ–∫: {player.title}\n\n–°—Å—ã–ª–∫–∞ –Ω–∞ —Ç—Ä–µ–∫: [YouTube]({youtube_url})",
                color=disnake.Color.green()
            )
            embed.set_footer(text=f"–ö–æ–º–∞–Ω–¥—É –≤—ã–ø–æ–ª–Ω–∏–ª: {inter.author.name}")
            await inter.edit_original_message(embed=embed)

            check_for_empty_channel.start(vc)

        except Exception as e:
            embed = disnake.Embed(
                title="‚ùå –û—à–∏–±–∫–∞",
                description=f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}",
                color=disnake.Color.red()
            )
            await inter.edit_original_message(embed=embed)
            print(f"–û—à–∏–±–∫–∞: {str(e)}")

    @bot.slash_command(name='mus_stop', description='–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∏ –æ—Ç–∫–ª—é—á–∏—Ç—å—Å—è –æ—Ç –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞.')
    async def mus_stop(inter: disnake.ApplicationCommandInteraction):
        await inter.response.defer()

        if inter.guild.voice_client is None:
            embed = disnake.Embed(
                title="‚ùå –û—à–∏–±–∫–∞",
                description="–ë–æ—Ç –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ –≥–æ–ª–æ—Å–æ–≤–æ–º—É –∫–∞–Ω–∞–ª—É.",
                color=disnake.Color.red()
            )
            await inter.edit_original_message(embed=embed)
            return

        try:
            vc = inter.guild.voice_client
            if vc.is_playing():
                vc.stop()

            await vc.disconnect()
            playlist.clear()

            embed = disnake.Embed(
                title="üõë –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ",
                description="–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ, –∏ –±–æ—Ç –æ—Ç–∫–ª—é—á–∏–ª—Å—è –æ—Ç –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞.",
                color=disnake.Color.red()
            )
            await inter.edit_original_message(embed=embed)

        except Exception as e:
            embed = disnake.Embed(
                title="‚ùå –û—à–∏–±–∫–∞",
                description=f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}",
                color=disnake.Color.red()
            )
            await inter.edit_original_message(embed=embed)
            print(f"–û—à–∏–±–∫–∞: {str(e)}")

    @bot.slash_command(name='mus_play', description='–ü–æ–∏—Å–∫ –∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –ø–µ—Å–Ω–∏ —Å YouTube –ø–æ –∑–∞–ø—Ä–æ—Å—É.')
    async def mus_play(inter: disnake.ApplicationCommandInteraction, query: str):
        await inter.response.defer()
        try:
            channel = inter.author.voice.channel
            if not channel:
                embed = disnake.Embed(
                    title="‚ùå –û—à–∏–±–∫–∞",
                    description="–í—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º –∫–∞–Ω–∞–ª–µ, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.",
                    color=disnake.Color.red()
                )
                await inter.edit_original_message(embed=embed)
                return

            search_url = f"ytsearch:{query}"
            data = await asyncio.get_event_loop().run_in_executor(None, lambda: ytdl.extract_info(search_url, download=False))

            if 'entries' not in data:
                embed = disnake.Embed(
                    title="‚ùå –û—à–∏–±–∫–∞",
                    description="–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–∏–¥–µ–æ –ø–æ –∑–∞–ø—Ä–æ—Å—É.",
                    color=disnake.Color.red()
                )
                await inter.edit_original_message(embed=embed)
                return

            entries = data['entries'][:5]
            options = [f"{i+1}. {entry['title']}" for i, entry in enumerate(entries)]
            options_str = "\n".join(options)

            embed = disnake.Embed(
                title="üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞",
                description=f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç—Ä–µ–∫–∞ –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è:\n{options_str}",
                color=disnake.Color.blue()
            )
            message = await inter.edit_original_message(embed=embed)

            def check(m):
                return m.author == inter.author and m.channel == inter.channel and m.content.isdigit()

            try:
                msg = await bot.wait_for('message', timeout=60.0, check=check)
                choice = int(msg.content) - 1
                if choice < 0 or choice >= len(entries):
                    raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")

                selected_entry = entries[choice]
                youtube_url = selected_entry['url']

                playlist.append(youtube_url)

                if not inter.guild.voice_client:
                    vc = await channel.connect()
                    await play_next_track(vc)
                else:
                    embed = disnake.Embed(
                        title="üéµ –¢—Ä–µ–∫ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ø–ª–µ–π–ª–∏—Å—Ç",
                        description=f"–¢—Ä–µ–∫: {selected_entry['title']}\n\n–°—Å—ã–ª–∫–∞ –Ω–∞ —Ç—Ä–µ–∫: [YouTube]({youtube_url})",
                        color=disnake.Color.green()
                    )
                    await inter.edit_original_message(embed=embed)

                check_for_empty_channel.start(inter.guild.voice_client)

            except asyncio.TimeoutError:
                embed = disnake.Embed(
                    title="‚ùå –û—à–∏–±–∫–∞",
                    description="–ò—Å—Ç–µ–∫–ª–æ –≤—Ä–µ–º—è –≤—ã–±–æ—Ä–∞ —Ç—Ä–µ–∫–∞.",
                    color=disnake.Color.red()
                )
                await inter.edit_original_message(embed=embed)
            except Exception as e:
                embed = disnake.Embed(
                    title="‚ùå –û—à–∏–±–∫–∞",
                    description=f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}",
                    color=disnake.Color.red()
                )
                await inter.edit_original_message(embed=embed)
                print(f"–û—à–∏–±–∫–∞: {str(e)}")

        except Exception as e:
            embed = disnake.Embed(
                title="‚ùå –û—à–∏–±–∫–∞",
                description=f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}",
                color=disnake.Color.red()
            )
            await inter.edit_original_message(embed=embed)
            print(f"–û—à–∏–±–∫–∞: {str(e)}")

    @bot.slash_command(name='mus_playlist', description='–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π —Ç—Ä–µ–∫ –∏ –ø–ª–µ–π–ª–∏—Å—Ç.')
    async def mus_playlist(inter: disnake.ApplicationCommandInteraction):
        await inter.response.defer()

        if inter.guild.voice_client is None:
            embed = disnake.Embed(
                title="‚ùå –û—à–∏–±–∫–∞",
                description="–ë–æ—Ç –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ –≥–æ–ª–æ—Å–æ–≤–æ–º—É –∫–∞–Ω–∞–ª—É.",
                color=disnake.Color.red()
            )
            await inter.edit_original_message(embed=embed)
            return

        try:
            vc = inter.guild.voice_client
            current_track = "–ù–µ—Ç –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è" if not vc.is_playing() else vc.source.title
            queue = "\n".join([f"{i+1}. {track}" for i, track in enumerate(playlist)])

            embed = disnake.Embed(
                title="üìú –ü–ª–µ–π–ª–∏—Å—Ç",
                description=f"–¢–µ–∫—É—â–∏–π —Ç—Ä–µ–∫: {current_track}\n\n–û—á–µ—Ä–µ–¥—å:\n{queue if queue else '–ü–ª–µ–π–ª–∏—Å—Ç –ø—É—Å—Ç.'}",
                color=disnake.Color.blue()
            )
            await inter.edit_original_message(embed=embed)

        except Exception as e:
            embed = disnake.Embed(
                title="‚ùå –û—à–∏–±–∫–∞",
                description=f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}",
                color=disnake.Color.red()
            )
            await inter.edit_original_message(embed=embed)
            print(f"–û—à–∏–±–∫–∞: {str(e)}")

    async def play_next_track(vc):
        if playlist:
            url = playlist.popleft()
            player = await YTDLSource.from_url(url, loop=bot.loop, stream=True)
            vc.play(player, after=lambda e: asyncio.create_task(play_next_track(vc)) if playlist else None)

    @tasks.loop(seconds=60)
    async def check_for_empty_channel(vc):
        if len(vc.channel.members) == 1:  # –¢–æ–ª—å–∫–æ –±–æ—Ç –≤ –∫–∞–Ω–∞–ª–µ
            await vc.disconnect()
            check_for_empty_channel.stop()
